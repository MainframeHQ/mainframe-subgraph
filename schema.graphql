### GENERIC TYPES ***

"""
Generic type for Erc20 tokens.
"""
type Token @entity {
  "Contract address"
  id: ID!
  "Erc20 decimals"
  decimals: Int!
  "Erc20 name"
  name: String!
  "Erc20 symbol"
  symbol: String!
}

"""
Generic type for Ethereum transactions.
"""
type Transaction @entity {
  "Transaction hash concatenated with the log index"
  id: ID!
  "Block number"
  blockNumber: Int!
  "Transaction log index"
  logIndex: Int!
  "Block timestamp"
  timestamp: Int!
  "Transaction hash"
  txHash: Bytes!
}

### PROTOCOL TYPES ***

"""
Account is an Ethereum address, with a list of all the fyTokens
and the fyTokens the user is in, along with liquidation information.
"""
type Account @entity {
  "User Ethereum address"
  id: ID!
  "Array of fyTokens user has opened a vault in"
  accountFyTokens: [AccountFyToken!]! @derivedFrom(field: "account")
  "How many times the user has been liquidated"
  countLiquidated: Int!
  "How many times the user has liquidated others"
  countLiquidator: Int!
  "Array of vaults opened by the user"
  vaults: [Vault!] @derivedFrom(field: "account")
}

"""
AccountFyToken is a single account within a single fyToken contract.
"""
type AccountFyToken @entity {
  "FyToken address concatenated with user Ethereum address"
  id: ID!
  "One-to-one relation to Account"
  account: Account!
  "One-to-one relation to FyToken"
  fyToken: FyToken!
  "fyToken balance of the user"
  fyTokenBalance: BigDecimal!
  "Total amount of fyTokens borrowed"
  totalFyTokenBorrowed: BigDecimal!
  "Total amount of fyTokens redeemed"
  totalFyTokenRedeemed: BigDecimal!
  "Total amount of fyTokens repaid"
  totalFyTokenRepaid: BigDecimal!
  "Total amount of underlying supplied"
  totalUnderlyingSupplied: BigDecimal!
  "Transactions data"
  transactions: [AccountFyTokenTransaction!]! @derivedFrom(field: "accountFyToken")
  "One-to-one relation to Vault"
  vault: Vault!
}

"""
Auxiliary entity for AccountFyToken.
"""
type AccountFyTokenTransaction implements Transaction @entity {
  "User Ethereum address concatenated with transaction hash concatenated with log index"
  id: ID!
  "One-to-one relation to AccountFyToken"
  accountFyToken: AccountFyToken!
  "Block number"
  blockNumber: Int!
  "Transaction log index"
  logIndex: Int!
  "Block timestamp"
  timestamp: Int!
  "Transaction hash"
  txHash: Bytes!
}

"""
Stores high-level variables for a Fintroller contract.
"""
type Fintroller @entity {
  "Always set to 1"
  id: ID!
  "One-to-many relation to FyToken"
  fyTokens: [FyToken!] @derivedFrom(field: "fintroller")
  "Discount on collateral that liquidators receive"
  liquidationIncentiveMantissa: BigDecimal!
  "Price oracle"
  oracle: Bytes!
}

"""
Stores high-level variables for a fyToken.
"""
type FyToken implements Token @entity {
  "Contract address"
  id: ID!
  "One-to-one relation to collateral"
  collateral: Token!
  "Erc20 decimals"
  decimals: Int!
  "Limits how much debt can be issued"
  debtCeiling: BigDecimal!
  "Unix timestamp in seconds when the bond expires"
  expirationTime: Int!
  "One-to-one relation to Fintroller"
  fintroller: Fintroller!
  "Erc20 name"
  name: String!
  "One-to-one relation to RedemptionPool"
  redemptionPool: RedemptionPool!
  "Erc20 symbol"
  symbol: String!
  "Erc20 total supply"
  totalSupply: BigDecimal!
  "One-to-on relation to underlying"
  underlying: Token!
  "One-to-many relation to Vault"
  vaults: [Vault!] @derivedFrom(field: "fyToken")
}

"""
Stores high-level variables for a fyToken's redemption pool.
"""
type RedemptionPool @entity {
  "FyToken address"
  id: ID!
  "One-to-one relation to FyTOken"
  fyToken: FyToken!
  "Total amount of underlying supplied"
  totalUnderlyingSupply: BigDecimal!
}

"""
Stores the collateral deposited by the user, along with the debt.
"""
type Vault @entity {
  "FyToken address concatenated with user Ethereum address"
  id: ID!
  "One-to-one relation to Account"
  account: Account!
  "Debt owed by the vault owner"
  debt: BigDecimal!
  "Collateral deposited"
  freeCollateral: BigDecimal!
  "One-to-one relation to FyToken"
  fyToken: FyToken!
  "Collateral deposited and locked to issue deb"
  lockedCollateral: BigDecimal!
  "Vault open state"
  isOpen: Boolean!
}

### EVENTS ***

"""
Stores information for borrows.
"""
type BorrowEvent implements TransferEvent @entity {
  "Transaction hash concatenated with log index"
  id: ID!
  "Amount of fyTokens borrowed"
  amount: BigDecimal!
  "Account that borrowed the fyTokens"
  borrower: Bytes!
  "Block number"
  blockNumber: Int!
  "Symbol of the borrowed fyToken"
  fyTokenSymbol: String!
  "Block timestamp"
  timestamp: Int!
}

"""
Stores information for burns. `To` address will always be a fyToken.
"""
type BurnEvent implements TransferEvent @entity {
  "Transaction hash concatenated with log index"
  id: ID!
  "fyTokens transferred"
  amount: BigDecimal!
  "Block number"
  blockNumber: Int!
  "Account that burnt tokens"
  from: Bytes!
  "Symbol of the fyToken transferred"
  fyTokenSymbol: String!
  "Block timestamp"
  timestamp: Int!
  "Account that received tokens (FyToken contract)"
  to: Bytes!
}

"""
Will be stored for every mint, burn, borrow, repay borrow, liquidate borrow,
and any normal transfer between two accounts. MintEvent, BurnEvent, BorrowEvent,
RepayBorrowEvent and LiquidationEvent all implement this type.
"""
type TransferEvent @entity {
  "Transaction hash concatenated with log index"
  id: ID!
  "fyTokens transferred"
  amount: BigDecimal!
  "Block number"
  blockNumber: Int!
  "Account that sent tokens"
  from: Bytes!
  "Symbol of the fyToken transferred"
  fyTokenSymbol: String!
  "Block timestamp"
  timestamp: Int!
  "Account that received tokens"
  to: Bytes!
}

"""
Stores information for liquidations. The event is emitted from the fyToken.
"""
type LiquidateBorrowEvent implements TransferEvent @entity {
  "Transaction hash concatenated with log index"
  id: ID!
  "Amount of fyTokens repaid by liquidator"
  amount: BigDecimal!
  "Block number"
  blockNumber: Int!
  "Collateral seized"
  clutchedCollateralAmount: BigDecimal!
  "Erc20 symbol of collateral clutched by liquidator"
  collateralSymbol: String!
  "Account liquidated (borrower)"
  from: Bytes!
  "Symbol of the fyToken repaid through liquidation"
  fyTokenSymbol: String!
  "Block timestamp"
  timestamp: Int!
  "Liquidator receiving tokens"
  to: Bytes!
}

"""
Stores information for mints. `From` address will always be a fyToken.
"""
type MintEvent implements TransferEvent @entity {
  "Transaction hash concatenated with log index"
  id: ID!
  "fyTokens transferred"
  amount: BigDecimal!
  "Block number"
  blockNumber: Int!
  "Account that sent tokens (FyToken contract)"
  from: Bytes!
  "Symbol of the fyToken transferred"
  fyTokenSymbol: String!
  "Block timestamp"
  timestamp: Int!
  "Account that received tokens (minter)"
  to: Bytes!
}

"""
Stores information for repays. Payer is not always the same as borrower,
such as in the event of a liquidation.
"""
type RepayBorrowEvent implements TransferEvent @entity {
  "Transaction hash concatenated with log index"
  id: ID!
  "Amount of fyTokens repaid"
  amount: BigDecimal!
  "Block number"
  blockNumber: Int!
  "Account that borrowed the tokens"
  borrower: Bytes!
  "Symbol of the fyToken transferred"
  fyTokenSymbol: String!
  "Debt still owed by the borrower"
  newDebt: BigDecimal!
  "Payer of the borrowed funds"
  payer: Bytes!
  "Block timestamp"
  timestamp: Int!
}
